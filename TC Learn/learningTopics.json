[
    {
      "id": "swift_001",
      "title": "Optionals verstehen",
      "description": "Erfahre, wie Optionals in Swift funktionieren und wie man sie sicher entpackt.",
      "steps": ["Deklariere eine optionale Variable","√úberpr√ºfe mit if let","Nutze optional chaining"],
      "colors": {
        "backgroundColors": ["#000000", "#FF6D2D", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "var name: String? = \"Tufan\"\nif let unwrapped = name { print(unwrapped) }",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#FF6D2D"
    },
    {
      "id": "struct_001",
      "title": "Structs verstehen",
      "description": "Lerne, wie man in Swift Strukturen erstellt, um eigene Datentypen zu definieren.",
      "steps": [
        "Struct mit `struct`-Keyword deklarieren.",
        "Eigene Properties und Methoden hinzuf√ºgen.",
        "Instanz erzeugen und auf Eigenschaften zugreifen."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#FF9F0A", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "struct User {\n    var name: String\n    var age: Int\n\n    func greet() {\n        print(\"Hallo, \\(name)!\")\n    }\n}\n\nlet person = User(name: \"Tufan\", age: 30)\nperson.greet()",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#FF6D2D"
    },
    {
      "id": "class_001",
      "title": "Klassen & Vererbung",
      "description": "Lerne den Unterschied zwischen Klassen und Structs und wie Vererbung funktioniert.",
      "steps": [
        "Klasse mit `class`-Keyword erstellen.",
        "Eigenschaften & Methoden definieren.",
        "Unterklasse ableiten und √ºberschreiben."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#FF375F", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "class Animal {\n    var name: String\n    init(name: String) { self.name = name }\n    func makeSound() { print(\"üêæ Ger√§usch\") }\n}\n\nclass Dog: Animal {\n    override func makeSound() { print(\"üê∂ Wuff!\") }\n}\n\nlet dog = Dog(name: \"Bello\")\ndog.makeSound()",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#FF6D2D"
    },
    {
      "id": "enum_001",
      "title": "Enums & Switch",
      "description": "Nutze Aufz√§hlungstypen (Enums) f√ºr feste Wertemengen und kombiniere sie mit Switch.",
      "steps": [
        "Enum mit `enum`-Keyword deklarieren.",
        "F√§lle definieren.",
        "Switch verwenden, um je nach Wert zu reagieren."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#5E5CE6", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "enum Direction {\n    case north, south, east, west\n}\n\nlet move = Direction.north\n\nswitch move {\ncase .north: print(\"‚¨ÜÔ∏è Norden\")\ncase .south: print(\"‚¨áÔ∏è S√ºden\")\ncase .east: print(\"‚û°Ô∏è Osten\")\ncase .west: print(\"‚¨ÖÔ∏è Westen\")\n}",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#5E5CE6"
    },
    {
      "id": "protocol_001",
      "title": "Protokolle (Interfaces)",
      "description": "Definiere Schnittstellen, die Klassen und Structs implementieren k√∂nnen.",
      "steps": [
        "Protocol mit Anforderungen deklarieren.",
        "Struct oder Class implementieren.",
        "Instanz nutzen."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#30D158", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "protocol Greetable {\n    func greet()\n}\n\nstruct Person: Greetable {\n    var name: String\n    func greet() { print(\"Hallo, \\(name)!\") }\n}\n\nlet me = Person(name: \"Tufan\")\nme.greet()",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#30D158"
    },
    {
      "id": "extension_001",
      "title": "Extensions nutzen",
      "description": "Erweitere bestehende Typen um neue Funktionen ohne den Original-Code zu ver√§ndern.",
      "steps": [
        "Mit `extension` bestehende Typen erweitern.",
        "Neue Methoden oder Properties hinzuf√ºgen."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#FF9500", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "extension String {\n    var isLong: Bool { self.count > 5 }\n}\n\nprint(\"Hallo\".isLong) // false\nprint(\"Hallo Welt\".isLong) // true",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#FF9500"
    },
    {
      "id": "error_001",
      "title": "Error Handling",
      "description": "Lerne, wie man Fehler in Swift definiert und behandelt.",
      "steps": [
        "Eigenen Error-Typ definieren.",
        "Funktionen mit `throws` markieren.",
        "Mit `do`-`try`-`catch` abfangen."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#FF3B30", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "enum LoginError: Error {\n    case wrongPassword\n}\n\nfunc login(password: String) throws {\n    if password != \"1234\" { throw LoginError.wrongPassword }\n    print(\"‚úÖ Eingeloggt\")\n}\n\ndo {\n    try login(password: \"0000\")\n} catch {\n    print(\"Fehler: \\(error)\")\n}",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#FF3B30"
    },
    {
      "id": "closure_001",
      "title": "Closures & Funktionen",
      "description": "Nutze anonyme Funktionen (Closures) f√ºr Callbacks und Funktionsparameter.",
      "steps": [
        "Closure-Syntax kennenlernen.",
        "Closure an eine Funktion √ºbergeben.",
        "Kurzschreibweise nutzen."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#FF9F0A", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "func fetchData(completion: (String) -> Void) {\n    completion(\"üì¶ Daten geladen\")\n}\n\nfetchData { message in\n    print(message)\n}",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#FF9F0A"
    },
      {
        "id": "swiftui_001",
        "title": "State & Binding verstehen",
        "description": "Lerne, wie du Zust√§nde und Bindings in SwiftUI benutzt, um Views reaktiv zu machen.",
        "steps": ["Erstelle eine @State Variable", "Nutze $Variable f√ºr Bindings", "Teste Live-Updates im Preview"],
        "colors": {
          "backgroundColors": ["#000000", "#0000FF", "000000"],
          "textColors": ["#FFFFFF"]
        },
        "code": "struct ContentView: View {\n @State private var name = \"\" \n var body: some View { TextField(\"Name\", text: $name) } }",
        "category": "SwiftUI",
        "categoryIcon": "swift",
        "categoryIconColor": "#0000FF"
      },
    {
        "id": "create_view_001",
        "title": "Eine einfache View erstellen",
        "description": "So erstellst du eine einfache SwiftUI View mit Text, Hintergrundfarbe und dynamischen Farben.",
        "steps": [
            "Neue SwiftUI View Datei anlegen (z.B. `MyFirstView.swift`).",
            "Struct erstellen, das das `View`-Protokoll erf√ºllt.",
            "`body`-Property implementieren und UI definieren."
        ],
        "colors": {
            "backgroundColors": ["#000000", "#FF0000", "#000000"],
            "textColors": ["#FFFFFF", "#FFFFFF"]
        },
        "code": "import SwiftUI\n\nstruct MyFirstView: View {\n    let bgColors = [Color(\"#F5F5F5\"), Color(\"#E0E0E0\")]\n    let textColors = [Color.black, Color.gray]\n\n    var body: some View {\n        ZStack {\n            LinearGradient(gradient: Gradient(colors: bgColors), startPoint: .top, endPoint: .bottom)\n                .ignoresSafeArea()\n            Text(\"Hallo SwiftUI!\")\n                .font(.title)\n                .foregroundColor(textColors.randomElement() ?? .black)\n                .padding()\n        }\n    }\n}\n\n#Preview {\n    MyFirstView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "create_view_002",
    "title": "View mit dynamischem Hintergrund",
    "description": "So kannst du mehrere Farben im Hintergrund mischen und dynamisch wechseln.",
    "steps": [
      "Array mit Farben anlegen.",
      "Gradient verwenden (LinearGradient oder RadialGradient)."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#FFA500", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct DynamicBackgroundView: View {\n    let gradientColors = [Color.red, Color.orange, Color.yellow]\n    \n    var body: some View {\n        ZStack {\n            LinearGradient(gradient: Gradient(colors: gradientColors), startPoint: .topLeading, endPoint: .bottomTrailing)\n                .ignoresSafeArea()\n            Text(\"Dynamischer Hintergrund\")\n                .font(.headline)\n                .foregroundColor(.white)\n                .padding()\n        }\n    }\n}\n\n#Preview {\n    DynamicBackgroundView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "list_001",
    "title": "Eine Liste erstellen",
    "description": "So zeigst du eine dynamische Liste von Elementen in SwiftUI.",
    "steps": [
      "Ein Array von Daten erstellen.",
      "Mit `List` alle Elemente anzeigen.",
      "Optional NavigationLink hinzuf√ºgen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#0A84FF", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct SimpleListView: View {\n    let fruits = [\"Apfel\", \"Banane\", \"Orange\", \"Traube\"]\n\n    var body: some View {\n        List(fruits, id: \\.self) { fruit in\n            Text(fruit)\n        }\n        .navigationTitle(\"Fr√ºchte\")\n    }\n}\n\n#Preview {\n    NavigationStack { SimpleListView() }\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "navigation_001",
    "title": "Navigation zwischen Views",
    "description": "Mit NavigationStack und NavigationLink kannst du zwischen Bildschirmen wechseln.",
    "steps": [
      "Eine NavigationStack als Wurzel verwenden.",
      "NavigationLink einf√ºgen, um zur DetailView zu springen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#30D158", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct NavigationExampleView: View {\n    var body: some View {\n        NavigationStack {\n            VStack {\n                Text(\"Home Screen\")\n                    .font(.largeTitle)\n                NavigationLink(\"Zur Detailseite\", destination: DetailView())\n                    .buttonStyle(.borderedProminent)\n            }\n            .navigationTitle(\"Navigation\")\n        }\n    }\n}\n\nstruct DetailView: View {\n    var body: some View {\n        Text(\"Hallo Detailseite!\")\n            .font(.title)\n    }\n}\n\n#Preview {\n    NavigationExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "textfield_001",
    "title": "TextField und Benutzereingabe",
    "description": "Mit TextField kannst du Eingaben vom Nutzer abfragen und anzeigen.",
    "steps": [
      "Eine @State-Variable f√ºr den Text anlegen.",
      "TextField binden und Ausgabe anzeigen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#5E5CE6", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct TextFieldExampleView: View {\n    @State private var name = \"\"\n\n    var body: some View {\n        VStack(spacing: 20) {\n            TextField(\"Dein Name\", text: $name)\n                .textFieldStyle(.roundedBorder)\n                .padding()\n\n            Text(\"Hallo, \\(name)\")\n                .font(.headline)\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    TextFieldExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "button_001",
    "title": "Button erstellen",
    "description": "So f√ºgst du einen Button hinzu und f√ºhrst eine Aktion beim Tippen aus.",
    "steps": [
      "Button mit Label und Action erstellen.",
      "Farbe und Stil anpassen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#FF3B30", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct ButtonExampleView: View {\n    var body: some View {\n        Button(action: {\n            print(\"Button wurde gedr√ºckt!\")\n        }) {\n            Text(\"Klick mich\")\n                .padding()\n                .background(Color.red)\n                .foregroundColor(.white)\n                .cornerRadius(8)\n        }\n    }\n}\n\n#Preview {\n    ButtonExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "tabbar_001",
    "title": "TabBar Navigation",
    "description": "Mit einer TabView kannst du mehrere Tabs (z. B. Home, Einstellungen) erstellen.",
    "steps": [
      "Eine TabView als Container verwenden.",
      "Innerhalb der TabView mehrere Views hinzuf√ºgen.",
      "F√ºr jede View ein TabItem definieren."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#0A84FF", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct TabBarExampleView: View {\n    var body: some View {\n        TabView {\n            Text(\"üè† Home\")\n                .tabItem {\n                    Image(systemName: \"house.fill\")\n                    Text(\"Home\")\n                }\n\n            Text(\"‚öôÔ∏è Einstellungen\")\n                .tabItem {\n                    Image(systemName: \"gear\")\n                    Text(\"Settings\")\n                }\n        }\n    }\n}\n\n#Preview {\n    TabBarExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "toggle_001",
    "title": "Toggle (Switch)",
    "description": "Mit Toggle kannst du einen Schalter erstellen, z. B. um Dark Mode zu aktivieren.",
    "steps": [
      "Eine @State-Variable f√ºr den Schalterwert anlegen.",
      "Toggle mit Binding auf diese Variable verbinden.",
      "Optional eine Aktion beim Umschalten ausf√ºhren."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#5E5CE6", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct ToggleExampleView: View {\n    @State private var isDarkMode = false\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Toggle(\"Dark Mode\", isOn: $isDarkMode)\n                .padding()\n\n            Text(isDarkMode ? \"üåô Dark Mode\" : \"‚òÄÔ∏è Light Mode\")\n                .font(.title)\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ToggleExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "slider_001",
    "title": "Slider f√ºr Werte",
    "description": "Mit Slider kannst du stufenlos einen Wert einstellen, z. B. Lautst√§rke oder Helligkeit.",
    "steps": [
      "Eine @State-Variable f√ºr den Wert anlegen.",
      "Slider mit diesem Wert verbinden.",
      "Den aktuellen Wert dynamisch anzeigen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#30D158", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct SliderExampleView: View {\n    @State private var volume: Double = 50\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"Lautst√§rke: \\(Int(volume))%\")\n                .font(.headline)\n\n            Slider(value: $volume, in: 0...100)\n                .padding()\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    SliderExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "alert_001",
    "title": "Alert anzeigen",
    "description": "Zeigt ein Pop-Up an, z. B. um eine Meldung oder Warnung anzuzeigen.",
    "steps": [
      "Eine @State-Variable f√ºr das Anzeigen des Alerts anlegen.",
      "Mit .alert() an die View binden.",
      "Titel und Buttons im Alert definieren."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#FF3B30", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct AlertExampleView: View {\n    @State private var showAlert = false\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Button(\"Zeige Alert\") {\n                showAlert = true\n            }\n            .alert(\"Achtung!\", isPresented: $showAlert) {\n                Button(\"OK\", role: .cancel) {}\n                Button(\"L√∂schen\", role: .destructive) {}\n            } message: {\n                Text(\"Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.\")\n            }\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    AlertExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "sheet_001",
    "title": "Sheet / Modal anzeigen",
    "description": "√ñffnet ein modales Sheet von unten, z. B. f√ºr Einstellungen oder Detailansichten.",
    "steps": [
      "Eine @State-Variable f√ºr das Anzeigen des Sheets anlegen.",
      "Mit .sheet() das Sheet an die View binden.",
      "Im Sheet eine eigene View anzeigen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#5AC8FA", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct SheetExampleView: View {\n    @State private var showSheet = false\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Button(\"Sheet √∂ffnen\") {\n                showSheet = true\n            }\n            .sheet(isPresented: $showSheet) {\n                VStack(spacing: 20) {\n                    Text(\"Hallo aus dem Sheet!\")\n                        .font(.title)\n                    Button(\"Schlie√üen\") {\n                        showSheet = false\n                    }\n                }\n                .padding()\n            }\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    SheetExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "animation_001",
    "title": "Einfache Animation",
    "description": "Bewege, vergr√∂√üere oder ver√§ndere Elemente mit SwiftUI Animationen.",
    "steps": [
      "Eine @State-Variable f√ºr die Animation anlegen.",
      "Mit withAnimation{} √Ñnderungen animieren.",
      "Beispiele: Farbe, Position oder Gr√∂√üe √§ndern."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#FF9500", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct AnimationExampleView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack(spacing: 40) {\n            Circle()\n                .fill(isExpanded ? .orange : .blue)\n                .frame(width: isExpanded ? 200 : 100, height: isExpanded ? 200 : 100)\n                .animation(.spring(), value: isExpanded)\n\n            Button(\"Animate\") {\n                isExpanded.toggle()\n            }\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    AnimationExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "gesture_001",
    "title": "Gestensteuerung",
    "description": "Reagiere auf Drag- oder Tap-Gesten, um UI interaktiver zu machen.",
    "steps": [
      "DragGesture oder TapGesture hinzuf√ºgen.",
      "Mit .gesture() an ein Element anh√§ngen.",
      "Position oder Zustand ver√§ndern, wenn die Geste erkannt wird."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#A2845E", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct GestureExampleView: View {\n    @State private var offset = CGSize.zero\n\n    var body: some View {\n        Circle()\n            .fill(.green)\n            .frame(width: 100, height: 100)\n            .offset(offset)\n            .gesture(\n                DragGesture()\n                    .onChanged { value in offset = value.translation }\n                    .onEnded { _ in withAnimation { offset = .zero } }\n            )\n            .padding()\n    }\n}\n\n#Preview {\n    GestureExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "progress_001",
    "title": "ProgressView",
    "description": "Zeigt einen Ladebalken oder Fortschrittskreis an.",
    "steps": [
      "ProgressView erstellen.",
      "Optional einen festen Wert angeben (0.0 bis 1.0).",
      "Design und Stil anpassen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#30D158", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct ProgressExampleView: View {\n    @State private var progress = 0.3\n\n    var body: some View {\n        VStack(spacing: 20) {\n            ProgressView(value: progress)\n                .padding()\n\n            Button(\"Mehr Fortschritt\") {\n                withAnimation { progress = min(progress + 0.1, 1.0) }\n            }\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ProgressExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "appstorage_001",
    "title": "AppStorage verwenden",
    "description": "Speichere einfache Werte dauerhaft auf dem Ger√§t, z. B. Dark Mode oder Username.",
    "steps": [
      "Mit @AppStorage eine persistente Variable anlegen.",
      "Der Wert bleibt beim App-Neustart erhalten.",
      "Ideal f√ºr User Settings."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#FF9F0A", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct AppStorageExampleView: View {\n    @AppStorage(\"username\") private var username = \"Gast\"\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"Willkommen, \\(username)!\")\n                .font(.headline)\n\n            TextField(\"Neuer Name\", text: $username)\n                .textFieldStyle(.roundedBorder)\n                .padding()\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    AppStorageExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "json_001",
    "title": "JSON laden",
    "description": "Lese lokale JSON-Dateien ein und verwende sie f√ºr deine App-Daten.",
    "steps": [
      "Ein Datenmodell erstellen, das Codable ist.",
      "JSON-Datei im Bundle speichern.",
      "Mit JSONDecoder einlesen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#0A84FF", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct Fruit: Codable, Identifiable {\n    let id = UUID()\n    let name: String\n}\n\nfunc loadFruits() -> [Fruit] {\n    guard let url = Bundle.main.url(forResource: \"fruits\", withExtension: \"json\"),\n          let data = try? Data(contentsOf: url) else {\n        return []\n    }\n    return (try? JSONDecoder().decode([Fruit].self, from: data)) ?? []\n}\n\nstruct JSONExampleView: View {\n    let fruits = loadFruits()\n\n    var body: some View {\n        List(fruits) { fruit in\n            Text(fruit.name)\n        }\n    }\n}\n\n#Preview {\n    JSONExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "haptics_001",
    "title": "Haptisches Feedback",
    "description": "F√ºge haptisches Feedback hinzu, wenn Buttons oder Aktionen ausgel√∂st werden.",
    "steps": [
      "UIImpactFeedbackGenerator oder UINotificationFeedbackGenerator verwenden.",
      "Im Button-Action ausl√∂sen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#FF3B30", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct HapticsExampleView: View {\n    var body: some View {\n        Button(\"Haptik testen\") {\n            let generator = UIImpactFeedbackGenerator(style: .medium)\n            generator.impactOccurred()\n        }\n        .padding()\n        .background(Color.red)\n        .foregroundColor(.white)\n        .cornerRadius(10)\n    }\n}\n\n#Preview {\n    HapticsExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "userdefaults_001",
    "title": "UserDefaults verwenden",
    "description": "Speichere und lade Werte manuell mit UserDefaults.",
    "steps": [
      "UserDefaults.standard verwenden.",
      "Wert setzen und auslesen.",
      "Ideal f√ºr einfache App Settings."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#5E5CE6", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct UserDefaultsExampleView: View {\n    @State private var username = UserDefaults.standard.string(forKey: \"username\") ?? \"Gast\"\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"Willkommen, \\(username)!\")\n                .font(.headline)\n\n            TextField(\"Neuer Name\", text: $username)\n                .textFieldStyle(.roundedBorder)\n                .padding()\n\n            Button(\"Speichern\") {\n                UserDefaults.standard.set(username, forKey: \"username\")\n            }\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    UserDefaultsExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "asyncimage_001",
    "title": "AsyncImage (Bilder aus dem Internet)",
    "description": "Lade Bilder von einer URL mit Platzhalter und automatischem Caching.",
    "steps": [
      "AsyncImage verwenden, URL angeben.",
      "Placeholder f√ºr Ladezustand definieren.",
      "Optionale Resizing- und Clipping-Optionen hinzuf√ºgen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#34C759", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\n\nstruct AsyncImageExampleView: View {\n    var body: some View {\n        AsyncImage(url: URL(string: \"https://picsum.photos/300\")) { image in\n            image.resizable().scaledToFit().cornerRadius(12)\n        } placeholder: {\n            ProgressView()\n        }\n        .frame(width: 200, height: 200)\n        .padding()\n    }\n}\n\n#Preview {\n    AsyncImageExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "mapkit_001",
    "title": "Karte anzeigen (MapKit)",
    "description": "Zeige eine interaktive Apple Map mit Annotationen und Position.",
    "steps": [
      "MapKit importieren und Map verwenden.",
      "Region als @State anlegen.",
      "AnnotationItems f√ºr Pins definieren."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#0A84FF", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\nimport MapKit\n\nstruct MapExampleView: View {\n    @State private var region = MKCoordinateRegion(\n        center: CLLocationCoordinate2D(latitude: 48.137, longitude: 11.575),\n        span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)\n    )\n\n    var body: some View {\n        Map(coordinateRegion: $region, annotationItems: [AnnotationItem()]) { item in\n            MapPin(coordinate: item.coordinate, tint: .blue)\n        }\n        .ignoresSafeArea()\n    }\n}\n\nstruct AnnotationItem: Identifiable {\n    let id = UUID()\n    let coordinate = CLLocationCoordinate2D(latitude: 48.137, longitude: 11.575)\n}\n\n#Preview {\n    MapExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "camera_001",
    "title": "Kamera & Fotoaufnahme",
    "description": "Zeigt ein Kamera-Preview und erm√∂glicht das Aufnehmen von Fotos mit dem neuen PhotosPicker.",
    "steps": [
      "PhotosUI importieren.",
      "PhotosPicker verwenden, um Bilder aufzunehmen oder auszuw√§hlen.",
      "Optional Kamera-Only konfigurieren."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#FF2D55", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\nimport PhotosUI\n\nstruct CameraExampleView: View {\n    @State private var selectedImage: PhotosPickerItem?\n    @State private var image: Image?\n\n    var body: some View {\n        VStack(spacing: 20) {\n            if let image = image {\n                image\n                    .resizable()\n                    .scaledToFit()\n                    .frame(height: 300)\n                    .cornerRadius(12)\n            } else {\n                Rectangle().fill(.gray.opacity(0.3)).frame(height: 300).cornerRadius(12)\n            }\n\n            PhotosPicker(selection: $selectedImage, matching: .images) {\n                Label(\"Foto aufnehmen oder w√§hlen\", systemImage: \"camera\")\n            }\n            .onChange(of: selectedImage) { newItem in\n                Task {\n                    if let data = try? await newItem?.loadTransferable(type: Data.self),\n                       let uiImage = UIImage(data: data) {\n                        image = Image(uiImage: uiImage)\n                    }\n                }\n            }\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    CameraExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "coredata_001",
    "title": "Core Data verwenden",
    "description": "Speichere Daten dauerhaft lokal mit Core Data und zeige sie in einer Liste.",
    "steps": [
      "PersistenceController erstellen (Core Data Stack).",
      "NSManagedObjectContext aus @Environment holen.",
      "FetchRequest verwenden, um Daten anzuzeigen."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#5AC8FA", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\nimport CoreData\n\nstruct CoreDataExampleView: View {\n    @Environment(\\.managedObjectContext) private var viewContext\n    @FetchRequest(\n        sortDescriptors: [NSSortDescriptor(keyPath: \\Item.timestamp, ascending: true)],\n        animation: .default)\n    private var items: FetchedResults<Item>\n\n    var body: some View {\n        NavigationStack {\n            List {\n                ForEach(items) { item in\n                    Text(item.timestamp!, formatter: dateFormatter)\n                }\n                .onDelete(perform: deleteItems)\n            }\n            .navigationTitle(\"Core Data\")\n            .toolbar {\n                ToolbarItem(placement: .navigationBarTrailing) {\n                    Button(action: addItem) {\n                        Label(\"Add\", systemImage: \"plus\")\n                    }\n                }\n            }\n        }\n    }\n\n    private func addItem() {\n        let newItem = Item(context: viewContext)\n        newItem.timestamp = Date()\n        try? viewContext.save()\n    }\n\n    private func deleteItems(offsets: IndexSet) {\n        for index in offsets { viewContext.delete(items[index]) }\n        try? viewContext.save()\n    }\n}\n\nprivate let dateFormatter: DateFormatter = {\n    let formatter = DateFormatter()\n    formatter.dateStyle = .short\n    formatter.timeStyle = .short\n    return formatter\n}()\n\n#Preview {\n    CoreDataExampleView().environment(\\.managedObjectContext, PersistenceController.preview.container.viewContext)\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
  {
    "id": "charts_001",
    "title": "Charts erstellen",
    "description": "Zeige einfache Diagramme mit dem Swift Charts Framework.",
    "steps": [
      "Charts importieren.",
      "Datenmodell definieren.",
      "Chart-View erstellen und Daten visualisieren."
    ],
    "colors": {
      "backgroundColors": ["#000000", "#FF9500", "#000000"],
      "textColors": ["#FFFFFF"]
    },
    "code": "import SwiftUI\nimport Charts\n\nstruct Sales: Identifiable {\n    let id = UUID()\n    let month: String\n    let amount: Double\n}\n\nstruct ChartsExampleView: View {\n    let data = [\n        Sales(month: \"Jan\", amount: 120),\n        Sales(month: \"Feb\", amount: 200),\n        Sales(month: \"M√§r\", amount: 150)\n    ]\n\n    var body: some View {\n        Chart(data) { item in\n            BarMark(\n                x: .value(\"Monat\", item.month),\n                y: .value(\"Verk√§ufe\", item.amount)\n            )\n            .foregroundStyle(.orange)\n        }\n        .frame(height: 300)\n        .padding()\n    }\n}\n\n#Preview {\n    ChartsExampleView()\n}",
    "category": "SwiftUI",
    "categoryIcon": "swift",
  },
    {
      "id": "generics_001",
      "title": "Generics verstehen",
      "description": "Nutze Generics, um Funktionen und Typen f√ºr verschiedene Datentypen wiederverwendbar zu machen.",
      "steps": [
        "Funktion mit Platzhalter-Typ <T> definieren.",
        "Mit beliebigen Datentypen aufrufen.",
        "Sichert Typpr√ºfung und vermeidet Code-Duplikate."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#BF5AF2", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "func swapValues<T>(_ a: inout T, _ b: inout T) {\n    let temp = a\n    a = b\n    b = temp\n}\n\nvar x = 5\nvar y = 10\nswapValues(&x, &y)\nprint(x, y) // 10 5",
      "category": "Swift",
      "categoryIcon": "swift",
      "categoryIconColor": "#BF5AF2"
    },
    {
      "id": "observableobject_001",
      "title": "ObservableObject & @Published",
      "description": "Baue reaktive ViewModels, die automatisch UI-Updates triggern, wenn sich Daten √§ndern.",
      "steps": [
        "Klasse mit ObservableObject-Protokoll erstellen.",
        "@Published f√ºr ver√§nderliche Properties verwenden.",
        "View mit @StateObject oder @ObservedObject verbinden."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#0A84FF", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "import SwiftUI\n\nclass CounterViewModel: ObservableObject {\n    @Published var count = 0\n    func increment() { count += 1 }\n}\n\nstruct CounterView: View {\n    @StateObject private var vm = CounterViewModel()\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"Z√§hler: \\(vm.count)\")\n                .font(.largeTitle)\n            Button(\"+1\") { vm.increment() }\n                .buttonStyle(.borderedProminent)\n        }\n    }\n}\n\n#Preview { CounterView() }",
      "category": "SwiftUI",
      "categoryIcon": "swift",
      "categoryIconColor": "#0A84FF"
    },
    {
      "id": "matchedgeometryeffect_001",
      "title": "MatchedGeometryEffect Animation",
      "description": "Erstelle sanfte √úberg√§nge zwischen Views, z. B. f√ºr Karten oder Detailansichten.",
      "steps": [
        "Namespace f√ºr Animation anlegen.",
        "matchedGeometryEffect(id:, in:) in beiden Views nutzen.",
        "Mit Animation beim State-Wechsel arbeiten."
      ],
      "colors": {
        "backgroundColors": ["#000000", "#FF2D55", "#000000"],
        "textColors": ["#FFFFFF"]
      },
      "code": "import SwiftUI\n\nstruct MatchedGeometryExampleView: View {\n    @Namespace private var ns\n    @State private var expanded = false\n\n    var body: some View {\n        VStack {\n            if expanded {\n                RoundedRectangle(cornerRadius: 25)\n                    .fill(.pink)\n                    .matchedGeometryEffect(id: \"card\", in: ns)\n                    .frame(width: 300, height: 300)\n            } else {\n                RoundedRectangle(cornerRadius: 25)\n                    .fill(.pink)\n                    .matchedGeometryEffect(id: \"card\", in: ns)\n                    .frame(width: 100, height: 100)\n            }\n        }\n        .onTapGesture {\n            withAnimation(.spring()) { expanded.toggle() }\n        }\n    }\n}\n\n#Preview { MatchedGeometryExampleView() }",
      "category": "SwiftUI",
      "categoryIcon": "swift",
      "categoryIconColor": "#FF2D55"
    }
]
